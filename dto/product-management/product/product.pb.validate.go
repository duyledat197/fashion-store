// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: product.proto

package product

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for ImageUrl

	// no validation rules for Description

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on RetrieveProductByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveProductByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveProductByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveProductByIDRequestMultiError, or nil if none found.
func (m *RetrieveProductByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveProductByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RetrieveProductByIDRequestMultiError(errors)
	}

	return nil
}

// RetrieveProductByIDRequestMultiError is an error wrapping multiple
// validation errors returned by RetrieveProductByIDRequest.ValidateAll() if
// the designated constraints aren't met.
type RetrieveProductByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveProductByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveProductByIDRequestMultiError) AllErrors() []error { return m }

// RetrieveProductByIDRequestValidationError is the validation error returned
// by RetrieveProductByIDRequest.Validate if the designated constraints aren't met.
type RetrieveProductByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveProductByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveProductByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveProductByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveProductByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveProductByIDRequestValidationError) ErrorName() string {
	return "RetrieveProductByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveProductByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveProductByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveProductByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveProductByIDRequestValidationError{}

// Validate checks the field values on RetrieveProductByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveProductByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveProductByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveProductByIDResponseMultiError, or nil if none found.
func (m *RetrieveProductByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveProductByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveProductByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveProductByIDResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveProductByIDResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveProductByIDResponseMultiError(errors)
	}

	return nil
}

// RetrieveProductByIDResponseMultiError is an error wrapping multiple
// validation errors returned by RetrieveProductByIDResponse.ValidateAll() if
// the designated constraints aren't met.
type RetrieveProductByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveProductByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveProductByIDResponseMultiError) AllErrors() []error { return m }

// RetrieveProductByIDResponseValidationError is the validation error returned
// by RetrieveProductByIDResponse.Validate if the designated constraints
// aren't met.
type RetrieveProductByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveProductByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveProductByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveProductByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveProductByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveProductByIDResponseValidationError) ErrorName() string {
	return "RetrieveProductByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveProductByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveProductByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveProductByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveProductByIDResponseValidationError{}

// Validate checks the field values on ListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductRequestMultiError, or nil if none found.
func (m *ListProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListProductRequestMultiError(errors)
	}

	return nil
}

// ListProductRequestMultiError is an error wrapping multiple validation errors
// returned by ListProductRequest.ValidateAll() if the designated constraints
// aren't met.
type ListProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductRequestMultiError) AllErrors() []error { return m }

// ListProductRequestValidationError is the validation error returned by
// ListProductRequest.Validate if the designated constraints aren't met.
type ListProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductRequestValidationError) ErrorName() string {
	return "ListProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductRequestValidationError{}

// Validate checks the field values on ListProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProductResponseMultiError, or nil if none found.
func (m *ListProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListProductResponseMultiError(errors)
	}

	return nil
}

// ListProductResponseMultiError is an error wrapping multiple validation
// errors returned by ListProductResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductResponseMultiError) AllErrors() []error { return m }

// ListProductResponseValidationError is the validation error returned by
// ListProductResponse.Validate if the designated constraints aren't met.
type ListProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductResponseValidationError) ErrorName() string {
	return "ListProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductResponseValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if _, err := url.Parse(m.GetImageUrl()); err != nil {
		err = CreateProductRequestValidationError{
			field:  "ImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}

	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on UpdateProductByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductByIDRequestMultiError, or nil if none found.
func (m *UpdateProductByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	if _, err := url.Parse(m.GetImageUrl()); err != nil {
		err = UpdateProductByIDRequestValidationError{
			field:  "ImageUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateProductByIDRequestMultiError(errors)
	}

	return nil
}

// UpdateProductByIDRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductByIDRequestMultiError) AllErrors() []error { return m }

// UpdateProductByIDRequestValidationError is the validation error returned by
// UpdateProductByIDRequest.Validate if the designated constraints aren't met.
type UpdateProductByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductByIDRequestValidationError) ErrorName() string {
	return "UpdateProductByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductByIDRequestValidationError{}

// Validate checks the field values on UpdateProductByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductByIDResponseMultiError, or nil if none found.
func (m *UpdateProductByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateProductByIDResponseMultiError(errors)
	}

	return nil
}

// UpdateProductByIDResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProductByIDResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateProductByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductByIDResponseMultiError) AllErrors() []error { return m }

// UpdateProductByIDResponseValidationError is the validation error returned by
// UpdateProductByIDResponse.Validate if the designated constraints aren't met.
type UpdateProductByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductByIDResponseValidationError) ErrorName() string {
	return "UpdateProductByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductByIDResponseValidationError{}

// Validate checks the field values on DeleteProductByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIDRequestMultiError, or nil if none found.
func (m *DeleteProductByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteProductByIDRequestMultiError(errors)
	}

	return nil
}

// DeleteProductByIDRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIDRequestMultiError) AllErrors() []error { return m }

// DeleteProductByIDRequestValidationError is the validation error returned by
// DeleteProductByIDRequest.Validate if the designated constraints aren't met.
type DeleteProductByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIDRequestValidationError) ErrorName() string {
	return "DeleteProductByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIDRequestValidationError{}

// Validate checks the field values on DeleteProductByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIDResponseMultiError, or nil if none found.
func (m *DeleteProductByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductByIDResponseMultiError(errors)
	}

	return nil
}

// DeleteProductByIDResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIDResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteProductByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIDResponseMultiError) AllErrors() []error { return m }

// DeleteProductByIDResponseValidationError is the validation error returned by
// DeleteProductByIDResponse.Validate if the designated constraints aren't met.
type DeleteProductByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIDResponseValidationError) ErrorName() string {
	return "DeleteProductByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIDResponseValidationError{}

// Validate checks the field values on DeleteProductByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIDsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIDsRequestMultiError, or nil if none found.
func (m *DeleteProductByIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductByIDsRequestMultiError(errors)
	}

	return nil
}

// DeleteProductByIDsRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIDsRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteProductByIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIDsRequestMultiError) AllErrors() []error { return m }

// DeleteProductByIDsRequestValidationError is the validation error returned by
// DeleteProductByIDsRequest.Validate if the designated constraints aren't met.
type DeleteProductByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIDsRequestValidationError) ErrorName() string {
	return "DeleteProductByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIDsRequestValidationError{}

// Validate checks the field values on DeleteProductByIDsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIDsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIDsResponseMultiError, or nil if none found.
func (m *DeleteProductByIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProductByIDsResponseMultiError(errors)
	}

	return nil
}

// DeleteProductByIDsResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteProductByIDsResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteProductByIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIDsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIDsResponseMultiError) AllErrors() []error { return m }

// DeleteProductByIDsResponseValidationError is the validation error returned
// by DeleteProductByIDsResponse.Validate if the designated constraints aren't met.
type DeleteProductByIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIDsResponseValidationError) ErrorName() string {
	return "DeleteProductByIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIDsResponseValidationError{}
