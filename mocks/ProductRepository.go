// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "trintech/review/internal/product-management/entity"
	database "trintech/review/pkg/database"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, db
func (_m *ProductRepository) Count(ctx context.Context, db database.Executor) (int64, error) {
	ret := _m.Called(ctx, db)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor) (int64, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor) int64); ok {
		r0 = rf(ctx, db)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Executor) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, db, data
func (_m *ProductRepository) Create(ctx context.Context, db database.Executor, data *entity.Product) (int64, error) {
	ret := _m.Called(ctx, db, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, *entity.Product) (int64, error)); ok {
		return rf(ctx, db, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, *entity.Product) int64); ok {
		r0 = rf(ctx, db, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Executor, *entity.Product) error); ok {
		r1 = rf(ctx, db, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteByID provides a mock function with given fields: ctx, db, id
func (_m *ProductRepository) DeleteByID(ctx context.Context, db database.Executor, id int64) error {
	ret := _m.Called(ctx, db, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, int64) error); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByIDs provides a mock function with given fields: ctx, db, ids
func (_m *ProductRepository) DeleteByIDs(ctx context.Context, db database.Executor, ids []int64) error {
	ret := _m.Called(ctx, db, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByIDs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, []int64) error); ok {
		r0 = rf(ctx, db, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, db, offset, limit
func (_m *ProductRepository) List(ctx context.Context, db database.Executor, offset int64, limit int64) ([]*entity.Product, error) {
	ret := _m.Called(ctx, db, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, int64, int64) ([]*entity.Product, error)); ok {
		return rf(ctx, db, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, int64, int64) []*entity.Product); ok {
		r0 = rf(ctx, db, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Executor, int64, int64) error); ok {
		r1 = rf(ctx, db, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveByID provides a mock function with given fields: ctx, db, id
func (_m *ProductRepository) RetrieveByID(ctx context.Context, db database.Executor, id int64) (*entity.Product, error) {
	ret := _m.Called(ctx, db, id)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveByID")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, int64) (*entity.Product, error)); ok {
		return rf(ctx, db, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, int64) *entity.Product); ok {
		r0 = rf(ctx, db, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Executor, int64) error); ok {
		r1 = rf(ctx, db, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateByID provides a mock function with given fields: ctx, db, id, data
func (_m *ProductRepository) UpdateByID(ctx context.Context, db database.Executor, id int64, data *entity.Product) error {
	ret := _m.Called(ctx, db, id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, int64, *entity.Product) error); ok {
		r0 = rf(ctx, db, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
