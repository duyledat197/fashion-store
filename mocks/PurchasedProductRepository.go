// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "trintech/review/internal/product-management/entity"
	database "trintech/review/pkg/database"

	mock "github.com/stretchr/testify/mock"
)

// PurchasedProductRepository is an autogenerated mock type for the PurchasedProductRepository type
type PurchasedProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, db, data
func (_m *PurchasedProductRepository) Create(ctx context.Context, db database.Executor, data *entity.PurchasedProduct) error {
	ret := _m.Called(ctx, db, data)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Executor, *entity.PurchasedProduct) error); ok {
		r0 = rf(ctx, db, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPurchasedProductRepository creates a new instance of PurchasedProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPurchasedProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PurchasedProductRepository {
	mock := &PurchasedProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
