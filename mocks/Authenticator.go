// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	token_util "trintech/review/pkg/token_util"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator[T token_util.Claims] struct {
	mock.Mock
}

// Generate provides a mock function with given fields: payload, expirationTime
func (_m *Authenticator[T]) Generate(payload T, expirationTime time.Duration) (string, error) {
	ret := _m.Called(payload, expirationTime)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(T, time.Duration) (string, error)); ok {
		return rf(payload, expirationTime)
	}
	if rf, ok := ret.Get(0).(func(T, time.Duration) string); ok {
		r0 = rf(payload, expirationTime)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(T, time.Duration) error); ok {
		r1 = rf(payload, expirationTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Verify provides a mock function with given fields: token
func (_m *Authenticator[T]) Verify(token string) (T, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (T, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) T); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator[T token_util.Claims](t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator[T] {
	mock := &Authenticator[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
