// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	auth "trintech/review/dto/user-management/auth"

	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// AuthServiceServer is an autogenerated mock type for the AuthServiceServer type
type AuthServiceServer struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) ForgotPassword(_a0 context.Context, _a1 *auth.ForgotPasswordRequest) (*auth.ForgotPasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 *auth.ForgotPasswordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ForgotPasswordRequest) (*auth.ForgotPasswordResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ForgotPasswordRequest) *auth.ForgotPasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ForgotPasswordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.ForgotPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Login(_a0 context.Context, _a1 *auth.LoginRequest) (*auth.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *auth.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.LoginRequest) *auth.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Logout(_a0 context.Context, _a1 *emptypb.Empty) (*auth.LogoutResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 *auth.LogoutResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) (*auth.LogoutResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *auth.LogoutResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.LogoutResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) Register(_a0 context.Context, _a1 *auth.RegisterRequest) (*auth.RegisterResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *auth.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterRequest) (*auth.RegisterResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.RegisterRequest) *auth.RegisterResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.RegisterRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: _a0, _a1
func (_m *AuthServiceServer) ResetPassword(_a0 context.Context, _a1 *auth.ResetPasswordRequest) (*auth.ResetPasswordResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *auth.ResetPasswordResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ResetPasswordRequest) (*auth.ResetPasswordResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.ResetPasswordRequest) *auth.ResetPasswordResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.ResetPasswordResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.ResetPasswordRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedAuthServiceServer provides a mock function with given fields:
func (_m *AuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {
	_m.Called()
}

// NewAuthServiceServer creates a new instance of AuthServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceServer {
	mock := &AuthServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
