// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"
	product "trintech/review/dto/product-management/product"

	mock "github.com/stretchr/testify/mock"
)

// ProductServiceServer is an autogenerated mock type for the ProductServiceServer type
type ProductServiceServer struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) CreateProduct(_a0 context.Context, _a1 *product.CreateProductRequest) (*product.CreateProductResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *product.CreateProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateProductRequest) (*product.CreateProductResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.CreateProductRequest) *product.CreateProductResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.CreateProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.CreateProductRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductByID provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) DeleteProductByID(_a0 context.Context, _a1 *product.DeleteProductByIDRequest) (*product.DeleteProductByIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductByID")
	}

	var r0 *product.DeleteProductByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteProductByIDRequest) (*product.DeleteProductByIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteProductByIDRequest) *product.DeleteProductByIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DeleteProductByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.DeleteProductByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProductByIDs provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) DeleteProductByIDs(_a0 context.Context, _a1 *product.DeleteProductByIDsRequest) (*product.DeleteProductByIDsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProductByIDs")
	}

	var r0 *product.DeleteProductByIDsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteProductByIDsRequest) (*product.DeleteProductByIDsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.DeleteProductByIDsRequest) *product.DeleteProductByIDsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.DeleteProductByIDsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.DeleteProductByIDsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProduct provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) ListProduct(_a0 context.Context, _a1 *product.ListProductRequest) (*product.ListProductResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListProduct")
	}

	var r0 *product.ListProductResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListProductRequest) (*product.ListProductResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.ListProductRequest) *product.ListProductResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.ListProductResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.ListProductRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveProductByID provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) RetrieveProductByID(_a0 context.Context, _a1 *product.RetrieveProductByIDRequest) (*product.RetrieveProductByIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveProductByID")
	}

	var r0 *product.RetrieveProductByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.RetrieveProductByIDRequest) (*product.RetrieveProductByIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.RetrieveProductByIDRequest) *product.RetrieveProductByIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.RetrieveProductByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.RetrieveProductByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProductByID provides a mock function with given fields: _a0, _a1
func (_m *ProductServiceServer) UpdateProductByID(_a0 context.Context, _a1 *product.UpdateProductByIDRequest) (*product.UpdateProductByIDResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProductByID")
	}

	var r0 *product.UpdateProductByIDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductByIDRequest) (*product.UpdateProductByIDResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *product.UpdateProductByIDRequest) *product.UpdateProductByIDResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product.UpdateProductByIDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *product.UpdateProductByIDRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedProductServiceServer provides a mock function with given fields:
func (_m *ProductServiceServer) mustEmbedUnimplementedProductServiceServer() {
	_m.Called()
}

// NewProductServiceServer creates a new instance of ProductServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceServer {
	mock := &ProductServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
